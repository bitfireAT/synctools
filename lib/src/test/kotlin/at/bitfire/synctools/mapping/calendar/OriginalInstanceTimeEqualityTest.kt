/*
 * This file is part of bitfireAT/synctools which is released under GPLv3.
 * Copyright Â© All Contributors. See the LICENSE and AUTHOR files in the root directory for details.
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

package at.bitfire.synctools.mapping.calendar

import android.provider.CalendarContract.Events
import at.bitfire.ical4android.Event
import at.bitfire.synctools.icalendar.propertyListOf
import at.bitfire.synctools.storage.calendar.AndroidCalendar
import io.mockk.junit4.MockKRule
import io.mockk.mockk
import net.fortuna.ical4j.model.Date
import net.fortuna.ical4j.model.DateTime
import net.fortuna.ical4j.model.TimeZoneRegistryFactory
import net.fortuna.ical4j.model.component.VEvent
import net.fortuna.ical4j.model.property.DtStart
import net.fortuna.ical4j.model.property.RecurrenceId
import org.junit.Assert.assertEquals
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner

/**
 * This class tests with the new and the old builder generate the same RECURRENCE-IDs for given exception events.
 *
 * This is very important in order to merge the exception Entities generated by the new and old builders correctly.
 */
@Deprecated("Remove when LegacyAndroidEventBuilder2 is dropped")
@RunWith(RobolectricTestRunner::class)
class OriginalInstanceTimeEqualityTest {

    @get:Rule
    val mockkRule = MockKRule(this)

    private val tzVienna = TimeZoneRegistryFactory.getInstance().createRegistry().getTimeZone("Europe/Vienna")


    @Test
    fun `Main event`() {
        val main = VEvent(propertyListOf(
            DtStart(),
            RecurrenceId()
        ))
        verify(null, main, main, Event(
            dtStart = DtStart(),
            recurrenceId = RecurrenceId()
        ), null)
    }

    @Test
    fun `Exception without RECURRENCE-ID, DTSTART is DATE-TIME`() {
        val legacy = Event(
            dtStart = DtStart()
        )
        verify(null,
            from = VEvent(),
            main = VEvent(propertyListOf(
                DtStart()
            )),
            legacy, legacy
        )
    }


    @Test
    fun `RECURRENCE-ID is DATE, DTSTART is DATE`() {
        val legacy = Event(
            dtStart = DtStart(Date("20250812")),
            recurrenceId = RecurrenceId(Date("20250812"))
        )
        verify(1754956800000,
            from = VEvent(propertyListOf(
                RecurrenceId(Date("20250812"))
            )),
            main = VEvent(propertyListOf(
                DtStart(Date("20250812")),
            )),
            legacy, legacy
        )
    }

    @Test
    fun `RECURRENCE-ID is DATE, DTSTART is DATE-TIME`() {
        val legacy = Event(
            dtStart = DtStart(DateTime("20250812T202912", tzVienna)),
            recurrenceId = RecurrenceId(Date("20250812"))
        )
        verify(1755023352000,
            from = VEvent(propertyListOf(
                RecurrenceId(Date("20250812"))
            )),
            main = VEvent(propertyListOf(
                DtStart(DateTime("20250812T202912", tzVienna)),
            )),
            legacy, legacy
        )
    }

    @Test
    fun `RECURRENCE-ID is DATE-TIME, DTSTART is DATE`() {
        val legacy = Event(
            dtStart = DtStart(Date("20250812")),
            recurrenceId = RecurrenceId(DateTime("20250812T202912", tzVienna))
        )
        verify(1754956800000,
            from = VEvent(propertyListOf(
                RecurrenceId(DateTime("20250812T202912", tzVienna))
            )),
            main = VEvent(propertyListOf(
                DtStart(Date("20250812")),
            )),
            legacy, legacy
        )
    }

    @Test
    fun `RECURRENCE-ID is DATE-TIME, DTSTART is DATE-TIME`() {
        val legacy = Event(
            dtStart = DtStart(DateTime("20250812T202912", tzVienna)),
            recurrenceId = RecurrenceId(DateTime("20250812T202912", tzVienna))
        )
        verify(1755023352000,
            from = VEvent(propertyListOf(
                RecurrenceId(DateTime("20250812T202912", tzVienna))
            )),
            main = VEvent(propertyListOf(
                DtStart(DateTime("20250812T202912", tzVienna)),
            )),
            legacy, legacy
        )
    }


    // helpers

    private fun fromLegacyBuilder(event: Event, recurrence: Event?): Long? {
        val values = LegacyAndroidEventBuilder2(
            calendar = mockk<AndroidCalendar>(relaxed = true),
            event = event,
            id = null,
            syncId = "sync-id",
            eTag = null,
            scheduleTag = null,
            flags = 0
        ).buildEventRow(recurrence)
        return values.getAsLong(Events.ORIGINAL_INSTANCE_TIME)
    }

    private fun fromNewBuilder(from: VEvent, main: VEvent): Long? {
        val values = AndroidEventBuilder(
            syncId = "sync-id",
            eTag = null,
            scheduleTag = null,
            flags = 0,
            associatedEvents = mockk(),
            androidCalendar = mockk(),
            event = mockk(),
            id = null
        ).buildEvent(from, main)?.entityValues
        return values?.getAsLong(Events.ORIGINAL_INSTANCE_TIME)
    }

    private fun verify(expected: Long?, from: VEvent, main: VEvent, legacy: Event, recurrence: Event?) {
        val legacy = fromLegacyBuilder(legacy, recurrence)
        val modern = fromNewBuilder(from, main)
        assertEquals("Legacy builder failed", expected, legacy)
        assertEquals("New builder failed", expected, modern)
    }

}